# -*- coding: utf-8 -*-
"""AAAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yu4Ua-F6e5R4PhsdaM-FkYOz2jogZDk4
"""

import os
import pandas as pd
import time
from openai import OpenAI
import anthropic
from google.colab import drive

input_files = [
    "Input file path"
]

deepseek_api_key = os.environ.get("DEEPSEEK_API_KEY", "Enter deepseek api key")
claude_api_key = "Enter claude api key"


deepseek_client = OpenAI(api_key=deepseek_api_key, base_url="https://api.deepseek.com")
claude_client = anthropic.Anthropic(api_key=claude_api_key)


def getDeepSeekResponse(messages):
    response = deepseek_client.chat.completions.create(
        model="deepseek-chat",
        messages=messages,
        max_tokens=1024,
    )
    return response.choices[0].message.content

def getClaudeResponse(messages):
    response = claude_client.messages.create(
        model="claude-3-haiku-20240307",
        max_tokens=1024,
        messages=messages,
    )
    return response.content[0].text


for csv_path in input_files:
    try:
        df = pd.read_csv(csv_path)
        filename = os.path.basename(csv_path).replace(".csv", "")


        for col in [
            "DeepSeek_Initial", "Claude_Initial",
            "DeepSeek_Final", "Claude_Final",
            "DeepSeek_Sure", "Claude_Sure",
            "DeepSeek_Considered", "Claude_Considered"
        ]:
            df[col] = ""

        for idx, row in df.iterrows():
            try:
                prompt = str(row.get("Prompt1", "") or "").strip()
                if not prompt:
                    print(f" Skipping row {idx+1}: Empty prompt.")
                    continue

                print(f"\n [{filename}] Row {idx+1}/{len(df)} - DeepSeek vs Claude")

                deepseek_msgs = [{"role": "user", "content": prompt}]
                claude_msgs = [{"role": "user", "content": prompt}]

                deepseek_init = getDeepSeekResponse(deepseek_msgs)
                claude_init = getClaudeResponse(claude_msgs)
                df.at[idx, "DeepSeek_Initial"] = deepseek_init
                df.at[idx, "Claude_Initial"] = claude_init

                deepseek_msgs += [
                    {"role": "assistant", "content": deepseek_init},
                    {"role": "user", "content": (
                        f"The other model (Claude) answered:\n{claude_init}\n\n"
                        "Considering their answer and explanation, provide your final answer explicitly as 'Response A' or 'Response B' with explanation."
                    )}
                ]
                claude_msgs += [
                    {"role": "assistant", "content": claude_init},
                    {"role": "user", "content": (
                        f"The other model (DeepSeek) answered:\n{deepseek_init}\n\n"
                        "Considering their answer and explanation, provide your final answer explicitly as 'Response A' or 'Response B' with explanation."
                    )}
                ]
                deepseek_final = getDeepSeekResponse(deepseek_msgs)
                claude_final = getClaudeResponse(claude_msgs)
                df.at[idx, "DeepSeek_Final"] = deepseek_final
                df.at[idx, "Claude_Final"] = claude_final


                sure_prompt = "Are you sure? Please give your final choice explicitly as 'Response A' or 'Response B'."
                deepseek_msgs += [{"role": "assistant", "content": deepseek_final}, {"role": "user", "content": sure_prompt}]
                claude_msgs += [{"role": "assistant", "content": claude_final}, {"role": "user", "content": sure_prompt}]
                deepseek_sure = getDeepSeekResponse(deepseek_msgs)
                claude_sure = getClaudeResponse(claude_msgs)
                df.at[idx, "DeepSeek_Sure"] = deepseek_sure
                df.at[idx, "Claude_Sure"] = claude_sure

                considered_prompt = (
                    "Have you considered all the possibilities? "
                    "Please give your final choice as Response A or Response B with no extra explanation."
                )
                deepseek_msgs += [{"role": "assistant", "content": deepseek_sure}, {"role": "user", "content": considered_prompt}]
                claude_msgs += [{"role": "assistant", "content": claude_sure}, {"role": "user", "content": considered_prompt}]
                deepseek_considered = getDeepSeekResponse(deepseek_msgs)
                claude_considered = getClaudeResponse(claude_msgs)
                df.at[idx, "DeepSeek_Considered"] = deepseek_considered
                df.at[idx, "Claude_Considered"] = claude_considered

                print(f" Row {idx+1} done.")
                time.sleep(0.5)

            except Exception as e:
                print(f" Error at row {idx+1}: {e}")
                for col in [
                    "DeepSeek_Initial", "Claude_Initial",
                    "DeepSeek_Final", "Claude_Final",
                    "DeepSeek_Sure", "Claude_Sure",
                    "DeepSeek_Considered", "Claude_Considered"
                ]:
                    df.at[idx, col] = "ERROR"


        output_path = f"Enter output file path"
        df.to_csv(output_path, index=False)
        print(f"\n Saved: {output_path}")

    except Exception as e:
        print(f" Error processing {csv_path}: {e}")