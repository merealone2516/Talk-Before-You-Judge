# -*- coding: utf-8 -*-
"""AAAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yu4Ua-F6e5R4PhsdaM-FkYOz2jogZDk4
"""

import os
import pandas as pd
import time
from datetime import datetime
from openai import OpenAI
from google.colab import userdata


csv_path = "Input file path"
df = pd.read_csv(csv_path)


df["GPT_Initial"] = ""
df["DeepSeek_Initial"] = ""
df["GPT_Final"] = ""
df["DeepSeek_Final"] = ""
df["GPT_Sure"] = ""
df["DeepSeek_Sure"] = ""
df["GPT_Considered"] = ""
df["DeepSeek_Considered"] = ""

gpt_api_key = os.environ.get("OPENAI_API_KEY", "Enter your GPT API KEy")
deepseek_api_key = os.environ.get("DEEPSEEK_API_KEY", "Enter your deepseek api key")


gpt_client = OpenAI(api_key=gpt_api_key)
deepseek_client = OpenAI(api_key=deepseek_api_key, base_url="https://api.deepseek.com")


def getGptResponse(messages):
    response = gpt_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        max_tokens=1024,
    )
    return response.choices[0].message.content

def getDeepSeekResponse(messages):
    response = deepseek_client.chat.completions.create(
        model="deepseek-chat",
        messages=messages,
        max_tokens=1024,
    )
    return response.choices[0].message.content


for idx, row in df.iterrows():
    try:
        prompt = str(row.get("Prompt1", "") or "")
        if not prompt.strip():
            print(f" Skipping row {idx+1}: Prompt empty.")
            continue

        print(f"\n Row {idx+1}/{len(df)} - GPT vs DeepSeek...")

        gpt_msgs = [{"role": "user", "content": prompt}]
        deepseek_msgs = [{"role": "user", "content": prompt}]

        gpt_initial = getGptResponse(gpt_msgs)
        deepseek_initial = getDeepSeekResponse(deepseek_msgs)

        df.at[idx, "GPT_Initial"] = gpt_initial
        df.at[idx, "DeepSeek_Initial"] = deepseek_initial

        gpt_msgs += [
            {"role": "assistant", "content": gpt_initial},
            {"role": "user", "content": (
                f"The other model (DeepSeek) answered:\n{deepseek_initial}\n\n"
                "Considering their answer and explanation, provide your final answer explicitly as 'Response A' or 'Response B' with explanation."
            )}
        ]
        deepseek_msgs += [
            {"role": "assistant", "content": deepseek_initial},
            {"role": "user", "content": (
                f"The other model (GPT) answered:\n{gpt_initial}\n\n"
                "Considering their answer and explanation, provide your final answer explicitly as 'Response A' or 'Response B' with explanation."
            )}
        ]

        gpt_final = getGptResponse(gpt_msgs)
        deepseek_final = getDeepSeekResponse(deepseek_msgs)

        df.at[idx, "GPT_Final"] = gpt_final
        df.at[idx, "DeepSeek_Final"] = deepseek_final


        sure_prompt = "Are you sure? Please give your final choice explicitly as 'Response A' or 'Response B'."

        gpt_msgs += [
            {"role": "assistant", "content": gpt_final},
            {"role": "user", "content": sure_prompt}
        ]
        deepseek_msgs += [
            {"role": "assistant", "content": deepseek_final},
            {"role": "user", "content": sure_prompt}
        ]

        gpt_sure = getGptResponse(gpt_msgs)
        deepseek_sure = getDeepSeekResponse(deepseek_msgs)

        df.at[idx, "GPT_Sure"] = gpt_sure
        df.at[idx, "DeepSeek_Sure"] = deepseek_sure


        considered_prompt = (
            "Have you considered all the possibilities? "
            "Please give your final choice as Response A or Response B with no extra explanation."
        )

        gpt_msgs += [
            {"role": "assistant", "content": gpt_sure},
            {"role": "user", "content": considered_prompt}
        ]
        deepseek_msgs += [
            {"role": "assistant", "content": deepseek_sure},
            {"role": "user", "content": considered_prompt}
        ]

        gpt_considered = getGptResponse(gpt_msgs)
        deepseek_considered = getDeepSeekResponse(deepseek_msgs)

        df.at[idx, "GPT_Considered"] = gpt_considered
        df.at[idx, "DeepSeek_Considered"] = deepseek_considered

        print(f"   Completed Row {idx+1}")
        time.sleep(0.5)

    except Exception as e:
        print(f" Error at row {idx+1}: {e}")
        for col in [
            "GPT_Initial", "DeepSeek_Initial",
            "GPT_Final", "DeepSeek_Final",
            "GPT_Sure", "DeepSeek_Sure",
            "GPT_Considered", "DeepSeek_Considered"
        ]:
            df.at[idx, col] = "ERROR"


timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
outpath = f"output path"
df.to_csv(outpath, index=False)