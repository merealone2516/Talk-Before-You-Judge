# -*- coding: utf-8 -*-
"""AAAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yu4Ua-F6e5R4PhsdaM-FkYOz2jogZDk4
"""

import os
import pandas as pd
import time
from datetime import datetime
from openai import OpenAI
from groq import Groq
from google.colab import userdata


df = pd.read_csv("Input file")


df["GPT_Initial"] = ""
df["Gemma_Initial"] = ""
df["GPT_Final"] = ""
df["Gemma_Final"] = ""
df["GPT_Sure"] = ""
df["Gemma_Sure"] = ""
df["GPT_Considered"] = ""
df["Gemma_Considered"] = ""


gpt_api_key = os.environ.get("OPENAI_API_KEY", "GPT API KEY")
groq_api_key = userdata.get("GROQ_API_KEY")
if not groq_api_key:
    raise ValueError(" GROQ_API_KEY not found.")

gpt_client = OpenAI(api_key=gpt_api_key)
gemma_client = Groq(api_key=groq_api_key)

def getGptResponse(messages):
    response = gpt_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        max_tokens=1024,
    )
    return response.choices[0].message.content

def getGemmaResponse(messages):
    completion = gemma_client.chat.completions.create(
        model="gemma2-9b-it",
        messages=messages,
        temperature=1,
        max_completion_tokens=1024,
        top_p=1,
        stream=False,
        stop=None,
    )
    return completion.choices[0].message.content

for idx, row in df.iterrows():
    try:
        prompt = str(row.get("Prompt1", "") or "")
        if not prompt.strip():
            print(f" Skipping row {idx+1}: Prompt empty.")
            continue

        print(f"\n Row {idx+1}/{len(df)} â€” GPT vs Gemma debate...")


        gpt_msgs = [{"role": "user", "content": prompt}]
        gemma_msgs = [{"role": "user", "content": prompt}]

        gpt_initial = getGptResponse(gpt_msgs)
        gemma_initial = getGemmaResponse(gemma_msgs)

        df.at[idx, "GPT_Initial"] = gpt_initial
        df.at[idx, "Gemma_Initial"] = gemma_initial

        gpt_msgs += [
            {"role": "assistant", "content": gpt_initial},
            {"role": "user", "content": (
                f"The other model (Gemma) answered:\n{gemma_initial}\n\n"
                "Considering their answer and explanation, provide your final answer explicitly as 'Response A' or 'Response B' with explanation."
            )}
        ]
        gemma_msgs += [
            {"role": "assistant", "content": gemma_initial},
            {"role": "user", "content": (
                f"The other model (GPT) answered:\n{gpt_initial}\n\n"
                "Considering their answer and explanation, provide your final answer explicitly as 'Response A' or 'Response B' with explanation."
            )}
        ]

        gpt_final = getGptResponse(gpt_msgs)
        gemma_final = getGemmaResponse(gemma_msgs)

        df.at[idx, "GPT_Final"] = gpt_final
        df.at[idx, "Gemma_Final"] = gemma_final


        sure_prompt = "Are you sure? Please give your final choice explicitly as 'Response A' or 'Response B'."

        gpt_msgs += [
            {"role": "assistant", "content": gpt_final},
            {"role": "user", "content": sure_prompt}
        ]
        gemma_msgs += [
            {"role": "assistant", "content": gemma_final},
            {"role": "user", "content": sure_prompt}
        ]

        gpt_sure = getGptResponse(gpt_msgs)
        gemma_sure = getGemmaResponse(gemma_msgs)

        df.at[idx, "GPT_Sure"] = gpt_sure
        df.at[idx, "Gemma_Sure"] = gemma_sure


        considered_prompt = (
            "Have you considered all the possibilities? "
            "Please give your final choice as Response A or Response B with no extra explanation."
        )

        gpt_msgs += [
            {"role": "assistant", "content": gpt_sure},
            {"role": "user", "content": considered_prompt}
        ]
        gemma_msgs += [
            {"role": "assistant", "content": gemma_sure},
            {"role": "user", "content": considered_prompt}
        ]

        gpt_considered = getGptResponse(gpt_msgs)
        gemma_considered = getGemmaResponse(gemma_msgs)

        df.at[idx, "GPT_Considered"] = gpt_considered
        df.at[idx, "Gemma_Considered"] = gemma_considered

        print(f"  GPT Considered: {gpt_considered[:60]}...")
        print(f"  Gemma Considered: {gemma_considered[:60]}...")

        time.sleep(0.5)

    except Exception as e:
        print(f" Error at row {idx+1}: {e}")
        for col in [
            "GPT_Initial", "Gemma_Initial", "GPT_Final", "Gemma_Final",
            "GPT_Sure", "Gemma_Sure", "GPT_Considered", "Gemma_Considered"
        ]:
            df.at[idx, col] = "ERROR"


timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
outpath = f" Output file path "
df.to_csv(outpath, index=False)