# -*- coding: utf-8 -*-
"""AAAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yu4Ua-F6e5R4PhsdaM-FkYOz2jogZDk4
"""

import os
import pandas as pd
import time
from datetime import datetime
from openai import OpenAI
import anthropic
from google.colab import userdata

input_csv = "input file"
df = pd.read_csv(input_csv)


columns_to_add = [
    "GPT_Initial", "Claude_Initial",
    "GPT_Final", "Claude_Final",
    "GPT_Sure", "Claude_Sure",
    "GPT_Considered", "Claude_Considered"
]
for col in columns_to_add:
    df[col] = ""


gpt_api_key = os.environ.get("OPENAI_API_KEY", "GPT API KEY")
claude_api_key = "Claude API Key"
if not gpt_api_key or not claude_api_key:
    raise EnvironmentError(" Missing GPT or Claude API key.")

gpt_client = OpenAI(api_key=gpt_api_key)
claude_client = anthropic.Anthropic(api_key=claude_api_key)


def getGptResponse(messages):
    response = gpt_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        max_tokens=1024,
    )
    return response.choices[0].message.content

def getClaudeResponse(messages):
    response = claude_client.messages.create(
        model="claude-3-haiku-20240307",
        max_tokens=1024,
        messages=messages,
    )
    return response.content[0].text

for idx, row in df.iterrows():
    try:
        prompt = str(row.get("Prompt1", "") or "").strip()
        if not prompt:
            print(f" Skipping row {idx+1}: Empty prompt.")
            continue

        print(f"\n Row {idx+1}/{len(df)} - GPT vs Claude...")

        gpt_msgs = [{"role": "user", "content": prompt}]
        claude_msgs = [{"role": "user", "content": prompt}]


        gpt_initial = getGptResponse(gpt_msgs)
        claude_initial = getClaudeResponse(claude_msgs)

        df.at[idx, "GPT_Initial"] = gpt_initial
        df.at[idx, "Claude_Initial"] = claude_initial


        gpt_msgs += [
            {"role": "assistant", "content": gpt_initial},
            {"role": "user", "content": (
                f"The other model (Claude) answered:\n{claude_initial}\n\n"
                "Considering their answer and explanation, provide your final answer explicitly as 'Response A' or 'Response B' with explanation."
            )}
        ]
        claude_msgs += [
            {"role": "assistant", "content": claude_initial},
            {"role": "user", "content": (
                f"The other model (GPT) answered:\n{gpt_initial}\n\n"
                "Considering their answer and explanation, provide your final answer explicitly as 'Response A' or 'Response B' with explanation."
            )}
        ]

        gpt_final = getGptResponse(gpt_msgs)
        claude_final = getClaudeResponse(claude_msgs)

        df.at[idx, "GPT_Final"] = gpt_final
        df.at[idx, "Claude_Final"] = claude_final


        sure_prompt = "Are you sure? Please give your final choice explicitly as 'Response A' or 'Response B'."

        gpt_msgs += [
            {"role": "assistant", "content": gpt_final},
            {"role": "user", "content": sure_prompt}
        ]
        claude_msgs += [
            {"role": "assistant", "content": claude_final},
            {"role": "user", "content": sure_prompt}
        ]

        gpt_sure = getGptResponse(gpt_msgs)
        claude_sure = getClaudeResponse(claude_msgs)

        df.at[idx, "GPT_Sure"] = gpt_sure
        df.at[idx, "Claude_Sure"] = claude_sure


        considered_prompt = "Have you considered all the possibilities? Please give your final choice as Response A or Response B with no extra explanation."

        gpt_msgs += [
            {"role": "assistant", "content": gpt_sure},
            {"role": "user", "content": considered_prompt}
        ]
        claude_msgs += [
            {"role": "assistant", "content": claude_sure},
            {"role": "user", "content": considered_prompt}
        ]

        gpt_considered = getGptResponse(gpt_msgs)
        claude_considered = getClaudeResponse(claude_msgs)

        df.at[idx, "GPT_Considered"] = gpt_considered
        df.at[idx, "Claude_Considered"] = claude_considered

        print(f"   Row {idx+1} complete.")

        time.sleep(0.5)

    except Exception as e:
        print(f" Error at row {idx+1}: {e}")
        for col in columns_to_add:
            df.at[idx, col] = "ERROR"


output_csv = f"Output file path"
df.to_csv(output_csv, index=False)