# -*- coding: utf-8 -*-
"""Claude.ipynb

Automatically generated by Colab.


"""

import os
import pandas as pd
import time
import anthropic
from datetime import datetime

def getClaudeResponse(api_key: str, messages: list[dict]) -> str:
    client = anthropic.Anthropic(api_key=api_key)
    response = client.messages.create(
        model="claude-3-haiku-20240307",
        max_tokens=1024,
        messages=messages,
    )
    return response.content[0].text

def processConversation(api_key: str, prompts: list[str]) -> list[str]:
    """Run a single conversation for one row of prompts, maintaining context."""
    responses = []
    messages = [{"role": "user", "content": prompts[0]}]

    for idx in range(len(prompts)):
        reply = getClaudeResponse(api_key, messages)
        responses.append(reply)
        preview = reply[:100].replace("\n", " ")
        print(f"  -> Reply {idx+1}: {preview}...")

        if idx + 1 < len(prompts):
            messages.append({"role": "assistant", "content": reply})
            messages.append({"role": "user", "content": prompts[idx + 1]})
    return responses

if __name__ == "__main__":
    API_KEY = os.environ.get("ANTHROPIC_API_KEY", "Enter you api key")


    df = pd.read_csv("Path of the input file")


    for i in range(1, 7):
        df[f"Response{i}"] = ""


    for idx, row in df.iterrows():
        try:
            prompts = [
                str(row.get(f"Prompt{i}", "") or "") for i in range(1, 7)
            ]

            if not prompts[0].strip():
                print(f"Skipping conversation {idx+1}: First prompt is empty.")
                continue

            print(f"\nProcessing conversation {idx+1}/{len(df)}...")

            responses = processConversation(API_KEY, prompts)


            for i, resp in enumerate(responses):
                df.at[idx, f"Response{i+1}"] = resp

        except Exception as e:
            print(f"❌ Error processing row {idx+1}: {e}")
            for i in range(6):
                df.at[idx, f"Response{i+1}"] = "ERROR"


        time.sleep(0.5)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"path for the output file"
    df.to_csv(output_file, index=False)
    print(f"\n✅ Processing complete. Output saved to {output_file}")
