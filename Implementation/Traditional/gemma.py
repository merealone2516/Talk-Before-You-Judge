# -*- coding: utf-8 -*-
"""Gemma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qZvQWSg8SzvSZFtQUpulGTy08GnV7S3S
"""

import os
import pandas as pd
import time
from groq import Groq
from datetime import datetime


input_files = [
    "Upload your input file",

]

# Step 3: Output directory in Drive
output_dir = "Path to save the output file"

# Step 4: Get GROQ API Key
API_KEY = userdata.get("GROQ_API_KEY")
if not API_KEY:
    raise ValueError("⚠️ GROQ_API_KEY not found in Colab `userdata`.")

client = Groq(api_key=API_KEY)


def getGroqResponse(client, messages: list[dict]) -> str:
    completion = client.chat.completions.create(
        model="gemma2-9b-it",
        messages=messages,
        temperature=1,
        max_completion_tokens=1024,
        top_p=1,
        stream=False,
        stop=None,
    )
    return completion.choices[0].message.content


def processConversation(client, prompts: list[str]) -> list[str]:
    responses = []
    messages = [{"role": "user", "content": prompts[0]}]
    for idx in range(len(prompts)):
        reply = getGroqResponse(client, messages)
        responses.append(reply)
        if idx + 1 < len(prompts):
            messages.append({"role": "assistant", "content": reply})
            messages.append({"role": "user", "content": prompts[idx + 1]})
    return responses


for input_path in input_files:
    try:
        df = pd.read_csv(input_path)

        for i in range(1, 7):
            df[f"Response{i}"] = ""

        print(f"\n🚀 Starting file: {input_path}")

        for idx, row in df.iterrows():
            try:
                prompts = [str(row.get(f"Prompt{i}", "") or "") for i in range(1, 7)]

                if not prompts[0].strip():
                    print(f"⏩ Skipping row {idx+1}: First prompt is empty.")
                    continue

                print(f"  ➤ Processing row {idx+1}/{len(df)}")
                responses = processConversation(client, prompts)

                for i, resp in enumerate(responses):
                    df.at[idx, f"Response{i+1}"] = resp

            except Exception as e:
                print(f"❌ Error in row {idx+1}: {e}")
                for i in range(6):
                    df.at[idx, f"Response{i+1}"] = "ERROR"

            time.sleep(0.5)

        # Step 6: Save output to Drive
        input_filename = os.path.basename(input_path).replace(".csv", "")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file_name = f"{input_filename}_gemma2_output_{timestamp}.csv"
        output_path = os.path.join(output_dir, output_file_name)

        df.to_csv(output_path, index=False)

    except Exception as e:
        print(f"\n❌ Failed to process file {input_path}: {e}")